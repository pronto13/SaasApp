#99 Active Record and Query String Parameters
ActiveRecord
  is rails way querying the database
  is the 'm' in the MVC
  models need schema
  object relational mapping system, don't need to program in sql
  should learn sql tho
  '.to_sql'
  query means - go look in the db and find somethin
  2 ways to send data in the interweb
  query string parameter -parameter(s) that comes after '?' in the url
  2nd way -> POST data.
  can send as many piece of data thru querry string parameter
  path(parameterkey1: value1, parameterkey2: value2,...parameterkeyN: valueN)
  qsp - path(key: value)(key+value makes the parameter)
  Substitution
  idea of mentally interchanging what you see when coding
  
#101 Accessing Parameters
  how to access it on another page, params [:key] == 'x'
  if GET req. s'got a parameter(s), rail then create a hash. Parameters hash
  can check/access it with param[:key] == value 
  
#103 Partials and Card Fields
  _name.html underscore means it's a partial form that you can refer on another page by removing the underscore
  <%= select_month nil, {add_month_numbers: true}, {name: nil, id: "card_month" } %>
  <%= select_year nil, {start_year: Date.today.year, end_year: Date.today.year+n}, {name: nil, id: "card_year" } %>
  ^ rails heavyliftin
  
#106 Explanation of Figaro
  stripe, figaro 2 spaces, not tab, in production .yml file (y tho?)
  .gitignore --> generated when we set up git
  filled with files that git ignores whenever we do push
  or deployment
  don't share your api keys! duh
  /config/initializers - filled with things that run when you start your app.
  ENV - > way of reaching figaro file .yml,  to grab the api keys
  
#107 Stripe requirements
  3 steps with stripe
  1. User js to send card info to stripe
  js pause the form when sign up button is clicked, not submit it to our server, no cc info in server!
  the script takes the cc field and send it to stripe server
  stripe will store the info and send back card token to us
  and js store it as a hidden field
  2. Validate user registration on our rails app server
  take form 1 info, email and password as well as hidden card token and plan id
  send the info to our rails app server and validate it
  3. Rails app will send user info to Stripe to create the subscription and finally save user to our db
  once validated. we send the infos to stripe
  then stripe create a subscription and create user out of the info
  stripe then send another token, a customer token which we will store in our db
  all 3 need to be scripted. code code *check requirements.txt
  
#118 Stripe (e-Commerce) review
  form - js - hijack form - send card info to stripe - stripe validate and process
  stripe send card token to us - get customer email and stuff - send it along with card token to stripe
  stripe then send customer token and make a subscription out of it.
  we only store the customer token.
  models files
  we write function that are related to our models
  all objects if we want to have certain capabilites not just attributes
  write the function in models/
  self = currentuser. when people simultaneously register use self
  to keep the program process individual data correctly. self
  
#123 Explanation of Nested Routes
  : in routes means it's interchangeable value
  nested routes. 
  routetype : name do
    routetype2 : name2
  end
  
#125 Dynamic Routes
  controller action - corresponding view
  instance variable (@variable) defined inside a controller
  so you can also use it in its corresponding view files
  normal variable in controller doesn't work in views
  function in a controller files is called action
  controller#action
  action - corresponding view files. with the same name file
  sidenote. you can write instance var inside a view files
  it'll override the instance variable inside your controller if they both have the same name
  qsp in a route with a dynamically generated value in url pattern (dynamic routes) (: colon) it'll
  it'll just stick the value in inside the url. (no ?)
  :key => value = old syntax for qsp
  qsp can be used in view files with (params)
  special function in views. debug (params)
  <%= debug(params) if Rails.env.development? %>
  if... - > only show the debug in development
  params hash can do it in view files and in controller
  can see params hash in server log too
  
  